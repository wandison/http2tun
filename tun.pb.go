// Code generated by protoc-gen-go.
// source: tun.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	tun.proto

It has these top-level messages:
	Tun
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Tun struct {
}

func (m *Tun) Reset()         { *m = Tun{} }
func (m *Tun) String() string { return proto1.CompactTextString(m) }
func (*Tun) ProtoMessage()    {}

type Tun_Frame struct {
	Message []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *Tun_Frame) Reset()         { *m = Tun_Frame{} }
func (m *Tun_Frame) String() string { return proto1.CompactTextString(m) }
func (*Tun_Frame) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for TunService service

type TunServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (TunService_StreamClient, error)
}

type tunServiceClient struct {
	cc *grpc.ClientConn
}

func NewTunServiceClient(cc *grpc.ClientConn) TunServiceClient {
	return &tunServiceClient{cc}
}

func (c *tunServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (TunService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TunService_serviceDesc.Streams[0], c.cc, "/proto.TunService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunServiceStreamClient{stream}
	return x, nil
}

type TunService_StreamClient interface {
	Send(*Tun_Frame) error
	Recv() (*Tun_Frame, error)
	grpc.ClientStream
}

type tunServiceStreamClient struct {
	grpc.ClientStream
}

func (x *tunServiceStreamClient) Send(m *Tun_Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunServiceStreamClient) Recv() (*Tun_Frame, error) {
	m := new(Tun_Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TunService service

type TunServiceServer interface {
	Stream(TunService_StreamServer) error
}

func RegisterTunServiceServer(s *grpc.Server, srv TunServiceServer) {
	s.RegisterService(&_TunService_serviceDesc, srv)
}

func _TunService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunServiceServer).Stream(&tunServiceStreamServer{stream})
}

type TunService_StreamServer interface {
	Send(*Tun_Frame) error
	Recv() (*Tun_Frame, error)
	grpc.ServerStream
}

type tunServiceStreamServer struct {
	grpc.ServerStream
}

func (x *tunServiceStreamServer) Send(m *Tun_Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunServiceStreamServer) Recv() (*Tun_Frame, error) {
	m := new(Tun_Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TunService",
	HandlerType: (*TunServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TunService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
